#!/usr/bin/env php
<?php

use Pacc\TokenFilterOutStream;
use Pacc\Lexer;
use Pacc\Parser;
use Pacc\Exceptions\UnexpectedToken;
use Pacc\Exceptions\UnexpectedEnd;
use Pacc\Exceptions\BadIdentifier;

$autoloader = __DIR__ . '/../vendor/autoload.php';
if (!file_exists($autoloader)) {
    $autoloader = './vendor/autoload.php';
}
if (!file_exists($autoroader)) {
    $autoloader = __DIR__ . '/../../../autoload.php';
}
if (file_exists($autoloader)) {
    require_once $autoloader;
}

$algorithms = array(
    'RD' => 'recursive descent',
    'LR' => 'canonical LR(1)',
);
$opts       = array_merge(array(
    'i' => '-',
    'o' => '-'
        ), getopt('hi:o:fa:'));

if (isset($opts['h'])) {
    $h = <<<E
{$_SERVER['argv'][0]} [ -h ] [ -i <input> ] [ -f ] [ -o <output> ] [ -a <algorithm> ]
    -h              show this help
    -i <input>      input file
    -f              force output file overwrite if exists
    -o <output>     output file
    -a <algorithm>  algorithm for generated  parser (default RD)
                    (use `help` to show available algorithms)

E;
    die($h);
}

if (isset($opts['a']) && $opts['a'] === 'help') {
    foreach ($algorithms as $algorithm => $description) {
        echo $algorithm . ': ' . $description . PHP_EOL;
    }
    die();
}

if ($opts['i'] === '-') {
    $opts['i'] = 'php://stdin';
}
if ($opts['o'] === '-') {
    $opts['o'] = 'php://stdout';
}

try {
    $lines = file($opts['i']);
    if ($lines === FALSE) {
        throw new Exception('Cannot read input file.');
    }

    $ignoredTokenClasses = array(
        \Pacc\Tokens\WhitespaceToken::class,
        \Pacc\Tokens\CommentToken::class
    );
    $stream              = new TokenFilterOutStream(Lexer::fromString(implode('', $lines)), $ignoredTokenClasses);
    $parser              = new Parser($stream);
    $grammar             = $parser->parse();

    if (empty($grammar->name)) {
        throw new Exception('`grammar` statement omitted. Cannot generated parser.');
    }

    if (!isset($opts['a'])) {
        if (isset($grammar->options['algorithm'])) {
            $opts['a'] = $grammar->options['algorithm'];
        }
        else {
            $opts['a'] = current(array_keys($algorithms));
        }
    }

    if (!isset($algorithms[$opts['a']])) {
        throw new Exception('Unknown algorithm `' . $opts['a'] . '`.');
    }

    $generatorclass = "\\Pacc\\" . $opts['a'] . 'Generator';
    $generator      = new $generatorclass($grammar);

    if (file_exists($opts['o']) && !isset($opts['f'])) {
        throw new Exception('Output file already exists. Use -f to force overwrite.');
    }
    $generator->writeToFile($opts['o']);
}
catch (UnexpectedToken $e) {
    file_put_contents('php://stderr',
                      $e->getMessage() . PHP_EOL .
            ((string) $e->token->line) . ': ' . rtrim($lines[$e->token->line - 1]) . PHP_EOL .
            str_repeat(' ', strlen((string) $e->token->line) + $e->token->position + 1) . '^' . PHP_EOL
    );
    die(-1);
}
catch (UnexpectedEnd $e) {
    file_put_contents('php://stderr', $e->getMessage() . PHP_EOL
    );
    die(-1);
}
catch (BadIdentifier $e) {
    file_put_contents('php://stderr',
                      $e->getMessage() . PHP_EOL .
            ((string) $e->token->line) . ': ' . rtrim($lines[$e->token->line - 1]) . PHP_EOL .
            str_repeat(' ', strlen((string) $e->token->line) + $e->token->position + 1) . '^' . PHP_EOL
    );
    die(-1);
}
catch (Exception $e) {
    file_put_contents('php://stderr', $e->getMessage() . PHP_EOL
    );
    die(-1);
}
